!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("nameless",[],t):"object"==typeof exports?exports.nameless=t():e.nameless=t()}("undefined"!=typeof self?self:this,function(){return n={},e.m=t=[function(e,t,n){(function(e){function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n(2),"undefined"!=typeof window&&(window.nameless=nameless),"object"===t(e)&&"object"===t(e.exports)&&(e.exports=nameless)}).call(this,n(1)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";function o(e,t){var n;t=assign({},t);for(var r=arguments.length,u=new Array(2<r?r-2:0),f=2;f<r;f++)u[f-2]=arguments[f];return{type:e,children:(n=[]).concat.apply(n,u).reduce(function(e,t){return null!=t&&1!=t&&0!=t&&(t instanceof Object?e.push(t):e.push(o("text",{textContent:t}))),e}),props:t||{}}}n.r(t),n.d(t,"createElement",function(){return o})}],e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(o,r,function(e){return t[e]}.bind(null,r));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},e.p="",e(e.s=0);function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var t,n});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uYW1lbGVzcy93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vbmFtZWxlc3Mvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbmFtZWxlc3MvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbmFtZWxlc3MvKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovL25hbWVsZXNzLy4vc3JjL2NyZWF0ZUVsZW1lbnQuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwibmFtZWxlc3MiLCJzZWxmIiwidGhpcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibSIsInJlcXVpcmUiLCJ3aW5kb3ciLCJfdHlwZW9mIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJjaGlsZHJlbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImwiLCJpIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJwcm9wcyIsIl9yZWYiLCJhc3NpZ24iLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwiYXBwbHkiLCJyZWR1Y2UiLCJhY2MiLCJjaGlsZCIsInB1c2giLCJ0ZXh0Q29udGVudCIsInIiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiZCIsImMiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwiZGVmYXVsdCIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicCIsInMiLCJtb2R1bGVJZCIsIm1vZHVsZXMiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELElBQ0EsbUJBQUFHLGVBQUFDLElBQ0FELE9BQUEsY0FBQUgsR0FDQSxpQkFBQUMsUUFDQUEsUUFBQUksU0FBQUwsSUFFQUQsRUFBQU0sU0FBQUwsSUFSQSxDQVNDLG9CQUFBTSxVQUFBQyxLQUFBLFdBQ0QsT0NUQUMsRUFBQSxHQTRCQUMsRUFBQUMsdVFDeEJpQkMsRUFBUSxHQUdILG9CQUFYQyxTQUNUQSxPQUFPUCxTQUFXQSxVQUdFLFdBQWxCUSxFQUFPWCxJQUFpRCxXQUExQlcsRUFBT1gsRUFBT0QsV0FDOUNDLEVBQU9ELFFBQVVJLDhDQ2JuQkgsRUFBQUQsUUFBQSxTQUFBQyxHQW9CQSxPQW5CQUEsRUFBQVksa0JBQ0FaLEVBQUFhLFVBQUEsYUFDQWIsRUFBQWMsTUFBQSxHQUVBZCxFQUFBZSxXQUFBZixFQUFBZSxTQUFBLElBQ0FDLE9BQUFDLGVBQUFqQixFQUFBLFVBQ0FrQixjQUNBQyxJQUFBLFdBQ0EsT0FBQW5CLEVBQUFvQixLQUdBSixPQUFBQyxlQUFBakIsRUFBQSxNQUNBa0IsY0FDQUMsSUFBQSxXQUNBLE9BQUFuQixFQUFBcUIsS0FHQXJCLEVBQUFZLGdCQUFBLEdBRUFaLGlDQ1ZPLFNBQVNzQixFQUFjQyxFQUFNQyxHQUFvQixJQUFBQyxFQUN0REQsRUFBUUUsT0FBTyxHQUFJRixHQURtQyxRQUFBRyxFQUFBQyxVQUFBQyxPQUFWZCxFQUFVLElBQUFlLE1BQUEsRUFBQUgsSUFBQSxLQUFBSSxFQUFBLEVBQUFBLEVBQUFKLEVBQUFJLElBQVZoQixFQUFVZ0IsRUFBQSxHQUFBSCxVQUFBRyxHQW1CdEQsTUFBTyxDQUNMUixPQUNBUixVQWxCa0JVLEVBQUEsSUFBR08sT0FBSEMsTUFBQVIsRUFBYVYsR0FBVW1CLE9BQ3pDLFNBQUNDLEVBQUtDLEdBWUosT0FYYSxNQUFUQSxHQUEwQixHQUFUQSxHQUEwQixHQUFUQSxJQUVoQ0EsYUFBaUJwQixPQUNuQm1CLEVBQUlFLEtBQUtELEdBRVRELEVBQUlFLEtBQUtmLEVBQWMsT0FBUSxDQUM3QmdCLFlBQWFGLE1BS1pELElBTVRYLE1BQU9BLEdBQVMsSUFoQ3BCakIsRUFBQWdDLEVBQUFDLEdBQUFqQyxFQUFBa0MsRUFBQUQsRUFBQSxrQ0FBQWxCLE1IZ0NBZixFQUFBbUMsRUFBQXBDLEVBR0FDLEVBQUFrQyxFQUFBLFNBQUExQyxFQUFBNEMsRUFBQUMsR0FDQXJDLEVBQUFzQyxFQUFBOUMsRUFBQTRDLElBQ0EzQixPQUFBQyxlQUFBbEIsRUFBQTRDLEVBQUEsQ0FBMEN6QixjQUFBQyxJQUFBeUIsS0FLMUNyQyxFQUFBZ0MsRUFBQSxTQUFBeEMsR0FDQSxvQkFBQStDLGVBQUFDLGFBQ0EvQixPQUFBQyxlQUFBbEIsRUFBQStDLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERoQyxPQUFBQyxlQUFBbEIsRUFBQSxjQUFpRGlELFlBUWpEekMsRUFBQTBDLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUF6QyxFQUFBeUMsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFwQyxPQUFBcUMsT0FBQSxNQUdBLEdBRkE5QyxFQUFBZ0MsRUFBQWEsR0FDQXBDLE9BQUFDLGVBQUFtQyxFQUFBLFdBQXlDbEMsY0FBQThCLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXpDLEVBQUFrQyxFQUFBVyxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9BQUFOLEVBQUFNLElBQXFCQyxLQUFBLEtBQUFELElBQ3JJLE9BQUFGLEdBSUE3QyxFQUFBaUQsRUFBQSxTQUFBeEQsR0FDQSxJQUFBNEMsRUFBQTVDLEtBQUFtRCxXQUNBLFdBQTJCLE9BQUFuRCxFQUFBeUQsU0FDM0IsV0FBaUMsT0FBQXpELEdBRWpDLE9BREFPLEVBQUFrQyxFQUFBRyxFQUFBLElBQUFBLEdBQ0FBLEdBSUFyQyxFQUFBc0MsRUFBQSxTQUFBYSxFQUFBQyxHQUFzRCxPQUFBM0MsT0FBQTRDLFVBQUFDLGVBQUFDLEtBQUFKLEVBQUFDLElBR3REcEQsRUFBQXdELEVBQUEsR0FJQXhELElBQUF5RCxFQUFBLEdBOUVBLFNBQUF6RCxFQUFBMEQsR0FHQSxHQUFBM0QsRUFBQTJELEdBQ0EsT0FBQTNELEVBQUEyRCxHQUFBbEUsUUFHQSxJQUFBQyxFQUFBTSxFQUFBMkQsR0FBQSxDQUNBNUMsRUFBQTRDLEVBQ0E3QyxLQUNBckIsUUFBQSxJQVVBLE9BTkFtRSxFQUFBRCxHQUFBSCxLQUFBOUQsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQVEsR0FHQVAsRUFBQW9CLEtBR0FwQixFQUFBRCxjQXZCQU8iLCJmaWxlIjoibmFtZWxlc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIm5hbWVsZXNzXCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIm5hbWVsZXNzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIm5hbWVsZXNzXCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qIE5hbWVsZXNzIGNvbnN0cnVjdG9yOiAqL1xuXG52YXIgTmFtZWxlc3NcblxudmFyIE5hbWVsZXNzID0ge1xuICBjcmVhdGVFbGVtZW50OiByZXF1aXJlKCcuL2NyZWF0ZUVsZW1lbnQnKVxufVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgd2luZG93Lm5hbWVsZXNzID0gbmFtZWxlc3M7XG59XG5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gbmFtZWxlc3M7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvKlxuICogQ3JlYXRlIGVsZW1lbnQgbWV0aG9kOlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlOiBUeXBlIG9mIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGwgfCB1bmRlZmluZWR9IFtwcm9wc106IEVsZW1lbnQgcHJvcGVydGllc1xuICpcbiAqIEAgcGFyYW0ge2FycmF5fSBbY2hpbGRyZW5dOiBDaGlsZHJlbiBvZiBlbGVtZW50XG4qL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0eXBlLCBwcm9wcywgLi4uY2hpbGRyZW4pIHtcbiAgcHJvcHMgPSBhc3NpZ24oe30sIHByb3BzKVxuXG4gIGxldCBjaGlsZEVsZW1lbnRzID0gW10uY29uY2F0KC4uLmNoaWxkcmVuKS5yZWR1Y2UoXG4gICAgKGFjYywgY2hpbGQpID0+IHtcbiAgICAgIGlmIChjaGlsZCAhPSBudWxsICYmIGNoaWxkICE9IHRydWUgJiYgY2hpbGQgIT0gZmFsc2UpIHtcblxuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICBhY2MucHVzaChjaGlsZClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY2MucHVzaChjcmVhdGVFbGVtZW50KFwidGV4dFwiLCB7XG4gICAgICAgICAgICB0ZXh0Q29udGVudDogY2hpbGRcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9KTtcblxuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgY2hpbGRyZW46IGNoaWxkRWxlbWVudHMsXG4gICAgcHJvcHM6IHByb3BzIHx8IHt9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=